* You are given a project to work and resolve the diamond promblem using OPP's concept.

interface DemoInterface1()
{  
public default void display()   
{  
System.out.println("the display() method of DemoInterface1 invoked");  
}  
}  
interface DemoInterface2  
{  
public default void display()   
{  
System.out.println("the display() method of DemoInterface2 invoked");  
}  
}  
public class DemoClass implements DemoInterface1, DemoInterface2  
{  
public void display()   
{  
DemoInterface1.super.display();  
DemoInterface2.super.display();  
}  
public static void main(String args[])   
{  
DemoClass obj = new DemoClass();  
obj.display();  
}  
}  
Output:

The display() method of DemoInterface1 invoked
The display() method of DemoInterface2 invoked
In the above example, we see that both the interfaces have the same method name and signature. We have invoked the method by an interface name that does not create any ambiguity between methods.


